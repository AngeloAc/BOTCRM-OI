<!-- <!DOCTYPE html>
<html>
<head>
  <title>Dashboard</title>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script>
    // Conectar-se ao WebSocket
    const socket = new WebSocket('ws://localhost:3000');

    // Lidar com a mensagem recebida do WebSocket
    socket.onmessage = function(event) {
      // Converter a mensagem recebida em um objeto JavaScript
      const data = JSON.parse(event.data);

      // Atualizar os valores do gráfico com os dados recebidos
      updateChart(data.labels, data.values);
    };

    let chart = null; // Variável para armazenar o objeto do gráfico

  // ...

  // Função para atualizar o gráfico
  function updateChart(labels, values) {
    const ctx = document.getElementById('chart').getContext('2d');

    // Destruir o gráfico existente, se existir
    if (chart) {
      chart.destroy();
    }

    // Criar um novo gráfico
    chart = new Chart(ctx, {
      type: 'line',
      data: {
        labels: labels,
        datasets: [{
          label: 'Valores',
          data: values,
          backgroundColor: 'rgba(0, 123, 255, 0.5)',
          borderColor: 'rgba(0, 123, 255, 1)',
          borderWidth: 1
        }]
      },
      options: {
        responsive: true,
        scales: {
          y: {
            beginAtZero: true
          }
        }
      }
    });
  }
  </script>
</head>
<body>
  <h1>Dashboard</h1>
  <canvas id="chart"></canvas>
</body>
</html> -->


<!DOCTYPE html>
<html>
<head>
  <title>Dashboard Moderno com P5.js</title>
  <style>
    body {
      margin: 0;
      padding: 0;
      font-family: Arial, sans-serif;
    }

    /* Dashboard Menu */
    .dashboard-menu {
    position: fixed;
    top: 0;
    left: 0;
    height: 100vh;
    width: 200px;
    background-color: gray;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    padding: 10px;
    box-sizing: border-box;
  }

    .dashboard-menu a {
      display: flex;
      color: black;
      text-decoration: none;
      padding: 8px;
      transition: background-color 0.3s;
      border: none;
      border-radius: 5px;
    }

    .dashboard-menu a:hover {
      background-color: #f2f2f2;
      color: black;
      border: none;
      border-radius: 5px;
    }

    .dashboard-menu .logo {
      font-weight: bold;
      font-size: 20px;
      margin-bottom: 20px;
    }

    .dashboard-menu .logout {
      margin-top: 20px;
    }

    /* Dashboard Center */
    .dashboard-center {
    margin-left: 200px;
    padding: 20px;
    overflow-y: auto;
    height: 100vh;
    box-sizing: border-box;
    display: none;
  }

    .dashboard-center.active {
      display: block;
    }
    
  </style>
</head>
<body>
   <!-- Dashboard Menu -->
   <section class="dashboard-menu">
    <div>
      <a class="logo">Logo</a>
      <hr style="border: 0.1px solid white;">
      <a href="#" class="dashboard-link" data-dashboard="dashboard">Dashboard</a>
      <a href="#" class="dashboard-link" data-dashboard="database">Database</a>
      <a href="#" class="dashboard-link" data-dashboard="bot">Bot</a>
      <a href="#" class="dashboard-link" data-dashboard="mensagens">Mensagens</a>
      <a href="#" class="dashboard-link" data-dashboard="configuracoes">Configurações</a>
    </div>
    <div class="logout">
      <a href="#">Sair</a>
    </div>
  </section>



  <!-- Dashboard Center - Gráficos e Informações -->
  <section class="dashboard-center" id="dashboard-dashboard" style="">
    <!-- Conteúdo do Dashboard "Dashboard" -->
    <h2>Dashboard</h2>
    <p>Aqui está o conteúdo do dashboard "Dashboard".</p>
      <!-- Adicione aqui o código dos gráficos e informações -->
      <h2>Gráficos e Informações</h2>
      <!-- Exemplo de gráfico -->
      <div style="display: flex;">
        <div style="flex: 1; margin-right: 10px; margin-bottom: 10px; width: 500px; height: 300px; border: .1px solid gray; border-radius: 5px;">
            <canvas id="chart"></canvas>
          </div>
          <div style="flex: 1; margin-left: 10px; margin-bottom: 10px; width: 500px; height: 300px; border: .1px solid gray; border-radius: 5px;">
            <canvas id="chart1"></canvas>
          </div>
      </div>
      <div style="display: flex;">
        <div style="flex: 1; margin-right: 10px; margin-bottom: 10px; width: 500px; height: 300px; border: .1px solid gray; border-radius: 5px;">
            <canvas id="pieChart"></canvas>
          </div>
          <div style="flex: 1; margin-left: 10px; margin-bottom: 10px; width: 500px; height: 300px; border: .1px solid gray; border-radius: 5px;">
            <canvas id="lineChart"></canvas>
          </div>
      </div>
  </section>

  <section class="dashboard-center" id="dashboard-database">
    <!-- Conteúdo do Dashboard "Database" -->
    <h2>Database</h2>
    <p>Aqui está o conteúdo do dashboard "Database".</p>
    
        <!-- Layouts do Dashboard "Database" -->
        <div class="grid-container">
          <div class="grid-item double-width">
            <!-- Layout do Mapa -->
            <h3>Mapa</h3>
            <!-- Conteúdo do Layout do Mapa -->
          </div>
          <div class="grid-item">
            <!-- Layout do Relógio -->
            <h3>Relógio</h3>
            <!-- Conteúdo do Layout do Relógio -->
            <canvas id="clock" width="200" height="200" style="background-color: gray; border-radius: 50%;"></canvas>

            
          </div>
          <div class="grid-item">
            <!-- Layout das Notificações do Sistema -->
            <h3>Notificações do Sistema</h3>
            <!-- Conteúdo do Layout das Notificações do Sistema -->
          </div>
          <div class="grid-item">
            <!-- Layout de Produtos -->
            <h3>Produtos</h3>
            <!-- Conteúdo do Layout de Produtos -->
          </div>
          <div class="grid-item">
            <!-- Layout de Adicionar Novos Usuários -->
            <h3>Adicionar Novos Usuários</h3>
            <!-- Conteúdo do Layout de Adicionar Novos Usuários -->
          </div>
        </div>
    
      
      
  </section>

  <section class="dashboard-center" id="dashboard-mensagens">
    <!-- Conteúdo do Dashboard "Mensagens" -->
    <h2>Mensagens</h2>
    <p>Aqui está o conteúdo do dashboard "Mensagens".</p>
  </section>

  <section class="dashboard-center" id="dashboard-configuracoes">
      <!-- Layout do Dashboard "Configurações" -->
  <div>
    <h2>Configurações</h2>
    <hr style="border: .1px solid gray; ">
    <!-- Campo para listar todos os usuários registrados -->
    <div>
      <h3>Usuários Registrados</h3>
      <ul>
        <li>Usuário 1</li>
        <li>Usuário 2</li>
        <li>Usuário 3</li>
        <!-- Adicione mais usuários conforme necessário -->
      </ul>
    </div>
    
    <!-- Botão para criar novo usuário -->
    <div>
      <a style="color: black;
      background-color: gray;
      text-decoration: none;
      padding: 8px;
      transition: background-color 0.3s;
      border: none;
      border-radius: 5px;">Novo Usuário</a>
    </div>
  </div>
  </section>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.4.0/p5.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.5.0/chart.min.js"></script>

  <script>
  
    // Conectar-se ao WebSocket
    const socket = new WebSocket('ws://localhost:3000');

    // Lidar com a mensagem recebida do WebSocket
    socket.onmessage = function(event) {
      // Converter a mensagem recebida em um objeto JavaScript
      const data = JSON.parse(event.data);

      // Atualizar os valores do gráfico com os dados recebidos
      updateChart(data.labels, data.values);
    };

    let chart = null; // Variável para armazenar o objeto do gráfico

  // ...

  // Função para atualizar o gráfico
  function updateChart(labels, values) {
    const ctx = document.getElementById('chart').getContext('2d');

    // Destruir o gráfico existente, se existir
    if (chart) {
      chart.destroy();
    }

    // Criar um novo gráfico
    chart = new Chart(ctx, {
      type: 'bar',
      data: {
        labels: labels,
        datasets: [{
          label: 'Valores',
          data: values,
          backgroundColor: 'rgba(0, 123, 255, 0.5)',
          borderColor: 'rgba(0, 123, 255, 1)',
          borderWidth: 1
        }]
      },
      options: {
        responsive: true,
        scales: {
          y: {
            beginAtZero: true
          }
        }
      }
    });
  }
  

        // Exemplo de gráfico usando a biblioteca Chart.js
        const ctx1 = document.getElementById('chart1').getContext('2d');
    new Chart(ctx1, {
      type: 'bar',
      data: {
        labels: ['Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho'],
        datasets: [{
          label: 'Vendas',
          data: [12, 19, 3, 5, 2, 3],
          backgroundColor: '#3498db',
          borderColor: '#3498db',
          borderWidth: 1
        }]
      },
      options: {
        scales: {
          y: {
            beginAtZero: true
          }
        }
      }
    });

    const ctx2 = document.getElementById('pieChart').getContext('2d');
    new Chart(ctx2, {
      type: 'pie',
      data: {
        labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple'],
        datasets: [{
          label: 'Dataset',
          data: [12, 19, 3, 5, 2],
          backgroundColor: ['red', 'blue', 'yellow', 'green', 'purple'],
          borderWidth: 1
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false
      }
    });

    // Dados do gráfico
const data = {
  labels: ['Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho'],
  datasets: [{
    label: 'Vendas',
    data: [12, 19, 3, 5, 2, 3],
    backgroundColor: 'rgba(75, 192, 192, 0.2)',
    borderColor: 'rgba(75, 192, 192, 1)',
    borderWidth: 1
  }]
};

// Configurações do gráfico
const config = {
  type: 'line',
  data: data,
  options: {
    responsive: true,
    scales: {
      y: {
        beginAtZero: true
      }
    }
  }
};

// Criação do gráfico
const ctx3 = document.getElementById('lineChart').getContext('2d');
new Chart(ctx3, config);

  </script>

  <script>
    // Obtém todos os links do dashboard
    const dashboardLinks = document.querySelectorAll('.dashboard-link');
    
    // Adiciona o evento de clique para cada link do dashboard
    dashboardLinks.forEach(link => {
      link.addEventListener('click', function(e) {
        e.preventDefault();
        
        // Obtém o ID do dashboard a ser exibido
        const dashboardId = this.getAttribute('data-dashboard');
        
        // Oculta todos os dashboards
        const dashboards = document.querySelectorAll('.dashboard-center');
        dashboards.forEach(dashboard => {
          dashboard.classList.remove('active');
        });
        
        // Exibe o dashboard correspondente ao ID clicado
        const dashboardToShow = document.getElementById(`dashboard-${dashboardId}`);
        dashboardToShow.classList.add('active');
      });
    });
  </script>

  <script>
    function drawClock() {
  const canvas = document.getElementById('clock');
  const ctx = canvas.getContext('2d');
  const radius = canvas.width / 2;

  // Desenhar o fundo do relógio
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  ctx.fillStyle = '#fff';
  ctx.beginPath();
  ctx.arc(radius, radius, radius, 0, 2 * Math.PI);
  ctx.fill();

  // Desenhar os números no relógio
  ctx.fillStyle = '#000';
  ctx.font = radius * 0.1 + 'px Arial';
  ctx.textBaseline = 'middle';
  ctx.textAlign = 'center';
  for (let num = 1; num <= 12; num++) {
    const ang = num * Math.PI / 6;
    const x = radius + radius * 0.8 * Math.sin(ang);
    const y = radius - radius * 0.8 * Math.cos(ang);
    ctx.fillText(num.toString(), x, y);
  }

  // Desenhar os ponteiros
  const now = new Date();
  const hour = now.getHours();
  const minute = now.getMinutes();
  const second = now.getSeconds();
  const hourAngle = (hour % 12 + minute / 60 + second / 3600) * (Math.PI / 6);
  const minuteAngle = (minute + second / 60) * (Math.PI / 30);
  const secondAngle = (second * Math.PI / 30);

  // Ponteiro das horas
  ctx.strokeStyle = '#000';
  ctx.lineWidth = radius * 0.07;
  drawHand(ctx, hourAngle, radius * 0.5, ctx.lineWidth);

  // Ponteiro dos minutos
  ctx.strokeStyle = '#000';
  ctx.lineWidth = radius * 0.05;
  drawHand(ctx, minuteAngle, radius * 0.7, ctx.lineWidth);

  // Ponteiro dos segundos
  ctx.strokeStyle = 'red';
  ctx.lineWidth = radius * 0.02;
  drawHand(ctx, secondAngle, radius * 0.9, ctx.lineWidth);
}

function drawHand(ctx, angle, length, width) {
  ctx.beginPath();
  ctx.moveTo(ctx.canvas.width / 2, ctx.canvas.height / 2);
  ctx.lineTo(
    ctx.canvas.width / 2 + Math.sin(angle) * length,
    ctx.canvas.height / 2 - Math.cos(angle) * length
  );
  ctx.lineWidth = width;
  ctx.lineCap = 'round';
  ctx.stroke();
}

// Atualizar o relógio a cada segundo
setInterval(drawClock, 1000);

  </script>
</body>
</html>





